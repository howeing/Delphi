unit unMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics, System.Math,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, step7, Vcl.Mask, RegularExpressions, System.StrUtils,
  Vcl.Samples.Spin, Vcl.Buttons, S7Simatic, Vcl.Grids, Vcl.ExtCtrls,Vcl.Touch.Keyboard, Vcl.ComCtrls,
  XLSSheetData5, XLSReadWriteII5, XLSComment5, XLSDrawing5, Xc12Utils5, Xc12Manager5, Vcl.Tabs, XLSGrid5,
  Data.Bind.EngExt, Vcl.Bind.DBEngExt, System.Rtti, System.Bindings.Outputs, unPublic,
  Vcl.Bind.Editors, Data.Bind.Components, Xml.xmldom, Xml.XMLIntf, Xml.XMLDoc, IpEdit,
  Vcl.Menus, CodeSiteLogging ;

type
  TfrmMain = class(TForm)
    GroupBox1: TGroupBox;
    btnConnect: TButton;
    plcGroupbox: TGroupBox;
    slotSpin: TSpinEdit;
    rackSpin: TSpinEdit;
    dbnoComboBox: TComboBox;
    Grid: TStringGrid;
    btnDisconnect: TBitBtn;
    lblInfo: TLabel;
    sharpStatus: TShape;
    GroupBox2: TGroupBox;
    btnOpen: TBitBtn;
    lblXlsfile: TLabel;
    xlsOpenDlg: TOpenDialog;
    XLS: TXLSReadWriteII5;
    btnReadplc: TBitBtn;
    lblTagName: TLabel;
    lblTagBlock: TLabel;
    lblTagAddr: TLabel;
    lblTagType: TLabel;
    chkTagBool: TCheckBox;
    edtTagFloat: TEdit;
    spinInt: TSpinEdit;
    btnTagWrite: TBitBtn;
    tabCtrl1: TTabControl;
    edtAddress: TEdit;
    edtRegular: TEdit;
    btnClear: TBitBtn;
    GroupBox3: TGroupBox;
    btntagplc: TBitBtn;
    lblReadFileName: TLabel;
    btnConvert: TBitBtn;
    pgbWrite: TProgressBar;
    lblWriteFileName: TLabel;
    pgbReadPlc: TProgressBar;
    chkDBFrom: TCheckBox;
    xlsGrid: TXLSGrid;
    GroupBox4: TGroupBox;
    lblCount: TLabel;
    bXml: TXMLDocument;
    ipAddrEdit: TEdit;
    chkAppend: TCheckBox;
    pmSave: TPopupMenu;
    N1: TMenuItem;
    CS1: TCodeSiteLogger;
    CSDest1: TCodeSiteDestination;
    CodeSiteProperties1: TCodeSiteProperties;

    procedure btnConnectClick(Sender: TObject);
    procedure GridSelectCell(Sender: TObject; ACol, ARow: Integer;
      var CanSelect: Boolean);
    procedure FormCreate(Sender: TObject);
    procedure btnDisconnectClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnOpenClick(Sender: TObject);
    procedure GridDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect;
      State: TGridDrawState);
    procedure edtTagFloatKeyPress(Sender: TObject; var Key: Char);
    procedure btnReadplcClick(Sender: TObject);
    procedure dbnoComboBoxChange(Sender: TObject);
    procedure btnTagWriteClick(Sender: TObject);
    procedure chkTagBoolClick(Sender: TObject);
    procedure lblTagNameClick(Sender: TObject);
    procedure lblTagTypeClick(Sender: TObject);
    procedure edtRegularChange(Sender: TObject);
    procedure btnClearClick(Sender: TObject);
    procedure tabCtrl1Change(Sender: TObject);
    procedure GridMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure btntagplcClick(Sender: TObject);
    procedure btnConvertClick(Sender: TObject);
    procedure chkDBFromClick(Sender: TObject);
    procedure chkAppendClick(Sender: TObject);
    procedure edtRegularKeyPress(Sender: TObject; var Key: Char);
    procedure N1Click(Sender: TObject);
    procedure btnConvertMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure btnConvertMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure btnConvertMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
  private
    reConnect :boolean ;
    tagCount :word;
    currDBno :word;
    selTagType :byte;
    selTagBlock :integer ;
    selTagDBno :word;
    selTagByte :word;
    selTagBit :byte;
    selRowNo : integer;
    gridClk :boolean;
    inXls, outXls :string ;
    tagxlsOpen, plcxlsOpen :boolean ;
    tagsEdit, plcEdit, xlsConverted :boolean ;

    x0, y0 :integer ;
    md :boolean ;

    excelWhole :TXLSWorksheet;
    XLSR, XLSW : TXLSReadWriteII5;

    { Private declarations }
    procedure ReadCells(xlsWkSheet :TXLSWorksheet);
    function GetRexRows(xlsWkSheet :TXLSWorksheet) :integer;
    procedure InitCtrl();
    function TranslationXLS(srcXLS :TXLSWorkSheet) :TXLSReadWriteII5;
    procedure ReadPlc(dirPLC :Boolean);
    function ReadXml(vNodeName :string) : string;
  public
    { Public declarations }
  end;

var
  frmMain: TfrmMain;

  s7plc :TSimatic;
  indexSheet :byte=0;

implementation

{$R *.dfm}
function TfrmMain.ReadXml(vNodeName :string) : string;
var
  rootNode :IXMLNode;
  iNodeList, kNodeList :IXMLNodeList;
  i, k, iCount, kCount :integer;
  nName, nValue :string;
begin
  Result :='';
  rootNode :=bXml.DocumentElement;
  iNodeList :=rootNode.{ChildNodes['Doc'].}ChildNodes;
  iCount :=iNodeList.Count;
  for i := 0 to iCount-1 do
  begin
    if iNodeList[i].NodeName = vNodeName then
    begin
      Result :=iNodeList[i].NodeValue;
      Exit ;
    end
    else
    begin
      nName :=iNodeList[i].NodeName;
      if iNodeList[i].HasChildNodes then
      begin
        kNodeList :=iNodeList[i].ChildNodes;
        kCount :=kNodeList.Count ;
        for k := 0 to kCount-1 do
          if kNodeList[k].NodeName = vNodeName then
          begin
            Result :=kNodeList[k].NodeValue;
            Exit
          end;
      end;
    end;
  end;


end;

function TfrmMain.TranslationXLS(srcXLS :TXLSWorkSheet) :TXLSReadWriteII5;
var
  srcR, srcC, dstR, dstC :integer;
  srcRowCount, srcColCount, dstRowCount, dstColCount :integer;
  vBlockNo :integer;
  vAddr :single;

  mycollDBDn, mycollDB: TMatchCollection;
  myenum: TMatchCollectionEnumerator;
  rexDBDn, rexDB: TRegEx;
  mygrpsDBDn, mygrpsDB: TGroupCollection;
begin
  vBlockNo :=0;
  srcXLS.CalcDimensions ;
  srcRowCount :=srcXLS.LastRow - srcXLS.FirstRow+1;
  srcColCount :=srcXLS.LastCol - srcXLS.FirstCol+1;
  dstR :=0;

  rexDBDn :=TRegEx.Create('(\d+)(\d\d\d\d)',[roIgnoreCase,roMultiLine]);
  rexDB :=TRegEx.Create('(^db)(\d+)',[roIgnoreCase,roMultiLine]);
  Result :=TXLSReadWriteII5.Create(Nil);

  for srcR := srcXLS.FirstRow to srcXLS.LastRow do
  begin
    if LowerCase(srcXLS.AsString[1,srcR]) <> 'local hmi' then
    begin
      Result[0].AsInteger[0,dstR] :=srcR+1;
      Result[0].AsString[1,dstR] :=srcXLS.AsString[0,srcR];
      if LowerCase(srcXLS.AsString[5,srcR]) = '不指定' then
        vAddr :=StrToFloatDef(Format('%.1f', [StrToInt(srcXLS.AsString[3,srcR])/10]),0)
      else
        vAddr :=StrToFloatDef(srcXLS.AsString[3,srcR], 0);

      if LowerCase(srcXLS.AsString[2,srcR]) = 'i' then
        vBlockNo :=1
      else if LowerCase(srcXLS.AsString[2,srcR]) = 'q' then
        vBlockNo :=2
      else if LowerCase(srcXLS.AsString[2,srcR]) = 'm' then
        vBlockNo :=3
      else if LowerCase(LeftStr(srcXLS.AsString[2,srcR],4)) = 'dbdn' then
      begin
        mycollDBDn :=rexDBDn.Matches(srcXLS.AsString[3,srcR]);
        mygrpsDBDn :=mycollDBDn[0].Groups;
        vBlockNo :=StrToInt(mygrpsDBDn.Item[1].Value);
        vAddr :=StrToInt(mygrpsDBDn.Item[2].Value);
      end
      else if TRegEx.IsMatch(srcXLS.AsString[2,srcR],'(^db)(\d+)',[roIgnoreCase,roMultiLine]) then
      begin
        mycollDB :=rexDB.Matches(srcXLS.AsString[2,srcR]);
        mygrpsDB :=mycollDB[0].Groups;
        vBlockNo :=StrToInt(mygrpsDB.Item[2].Value);
      end;
      Result[0].AsInteger[2,dstR] :=vBlockNo;
      Result[0].AsFloat[3,dstR] :=RoundTo(vAddr/1.0,-2);
      if LowerCase(srcXLS.AsString[5,srcR]) = '不指定' then
        Result[0].AsString[4,dstR] :='Bool'
      else if LowerCase(srcXLS.AsString[5,srcR]) = '16-bit signed' then
        Result[0].AsString[4,dstR] :='Int'
      else if LowerCase(srcXLS.AsString[5,srcR]) = '16-bit unsigned' then
        Result[0].AsString[4,dstR] :='Word'
      else if LowerCase(srcXLS.AsString[5,srcR]) = '32-bit signed' then
        Result[0].AsString[4,dstR] :='DInt'
      else if LowerCase(srcXLS.AsString[5,srcR]) = '32-bit unsigned' then
        Result[0].AsString[4,dstR] :='DWord'
      else if LowerCase(srcXLS.AsString[5,srcR]) = '32-bit float' then
        Result[0].AsString[4,dstR] :='Float';
      pgbWrite.Position :=Ceil(dstR/srcRowCount*100);
      Inc(dstR)
    end;
  end;
  Result[0].CalcDimensions;
  Result[0].Columns[0].Width :=1800;
  Result[0].Columns[1].Width := 9000;
  Result[0].Columns[2].Width := 2000;
  Result[0].Columns[3].Width := 3000;
  Result[0].Columns[4].Width := 3000;
  Result[0].Columns[5].Width := 10000;
end;

procedure TfrmMain.ReadPlc(dirPLC :Boolean);                                    //true-plc,false-buffer
var
  vDBno, vByte, vBit, i, iqmType, S7dbFrom :integer;
  vType, cellIQMType :string;
  vAddr :single;
begin
  if dirPLC then S7dbFrom :=S7AreaDB else S7dbFrom :=S7AreaBUFF;
  s7plc.GetBlocks();
  for i := 1 to tagCount do
  begin
    try
      vType := LowerCase(Trim(Grid.Cells[4,i]));
      vAddr := StrToFloatDef(Trim(Grid.Cells[3,i]),0);
      vByte :=Trunc(vAddr);
      vBit :=Round((vAddr - vByte)*10);

      cellIQMType :=LowerCase(LeftStr(Grid.Cells[2,i],1));

      if LowerCase(LeftStr(Grid.Cells[2,i],2)) ='db' then
      begin
        vDBno :=StrToInt(RightStr(Grid.Cells[2,i], Length(Grid.Cells[2,i])-3));
        if vType = 'bool' then
          Grid.Cells[5,i] :=BoolToStr(s7plc.GetBoolean(S7dbFrom,vDBno,vByte,vBit),True)
        else if vType = 'int' then
          Grid.Cells[5,i] :=IntToStr(s7plc.GetInt(S7dbFrom,vDBno,vByte))
        else if vType = 'dint' then
          Grid.Cells[5,i] :=IntToStr(s7plc.GetDInt(S7dbFrom,vDBno,vByte))
        else if vType = 'float' then
          Grid.Cells[5,i] :=FloatToStr(s7plc.GetFloat(S7dbFrom,vDBno,vByte));
      end
      else if (cellIQMType ='i') or (cellIQMType ='q') or (cellIQMType ='m') then
      begin
        if cellIQMType ='i'then
          iqmType :=S7AreaPE
        else if cellIQMType ='q'then
          iqmType :=S7AreaPA
        else
          iqmType :=S7AreaMK;
        vDBno :=0;
        if vType = 'bool' then
          Grid.Cells[5,i] :=BoolToStr(s7plc.GetBoolean(iqmType,vDBno,vByte,vBit),True)
        else if vType = 'int' then
          Grid.Cells[5,i] :=IntToStr(s7plc.GetInt(iqmType,vDBno,vByte))
        else if vType = 'dint' then
          Grid.Cells[5,i] :=IntToStr(s7plc.GetDInt(iqmType,vDBno,vByte))
        else if vType = 'float' then
          Grid.Cells[5,i] :=FloatToStr(s7plc.GetFloat(iqmType,vDBno,vByte));
      end;
      pgbReadPlc.Position :=Ceil(i/tagCount*100);
    except on e: Exception do
      Grid.Cells[5,i] :='error';
    end;
  end;
end;

procedure TfrmMain.tabCtrl1Change(Sender: TObject);
begin
  if tabCtrl1.TabIndex = 0 then
  begin
    GroupBox2.Visible :=True;
    GroupBox3.Visible :=False;
    GroupBox4.Visible :=True;
    Grid.Visible :=True;
    xlsGrid.Visible :=False;
  end
  else
  begin
    GroupBox2.Visible :=False;
    GroupBox3.Visible :=True;
    GroupBox4.Visible :=False;
    Grid.Visible :=False;
    xlsGrid.Visible :=True;
  end;
end;

procedure TfrmMain.btnOpenClick(Sender: TObject);
begin
  if xlsOpenDlg.Execute then
  begin
    if LowerCase(LeftStr(ExtractFileName(xlsOpenDlg.FileName),4))= 'plc_' then
    begin
      lblXlsfile.Caption :=xlsOpenDlg.FileName;
      XLS.Filename :=xlsOpenDlg.FileName;
      XLS.Read ;
      excelWhole :=XLS[indexSheet];
      ReadCells(XLS[indexSheet]);
    end
    else
    begin
      lblXlsfile.Caption :=xlsOpenDlg.FileName;
      //Application.MessageBox('The Excel filename prefix must be ''plc_'' .','File Error', MB_OK);
      MessageDlg('The Excel filename prefix must be ''plc_'' !',mtWarning, [mbOK],0);
      Exit;
    end;
  end;
  InitCtrl;
end;

procedure TfrmMain.btnReadplcClick(Sender: TObject);
begin
  ReadPlc(chkDBFrom.Checked);
end;

procedure TfrmMain.btnTagWriteClick(Sender: TObject);
begin
  if not s7plc.Connected then exit;

  if not dbnoComboBox.Visible then
    case selTagType of
      0:; //none
      1:  //bool
          begin
            s7plc.SetBoolean(selTagBlock, selTagDBno, selTagByte, selTagBit, chkTagBool.Checked);
            Grid.Cells[5, selRowNo] :=BoolToStr(s7plc.GetBoolean(selTagBlock, selTagDBno, selTagByte, selTagBit), True);
          end;
      2:  //byte
          begin
            s7plc.SetByte(selTagBlock, selTagDBno, selTagByte, spinInt.Value);
            Grid.Cells[5, selRowNo] :=IntToStr(s7plc.GetByte(selTagBlock, selTagDBno, selTagByte));
          end;
      3:  //int
          begin
            s7plc.SetInt(selTagBlock, selTagDBno, selTagByte, spinInt.Value);
            Grid.Cells[5, selRowNo] :=IntToStr(s7plc.GetInt(selTagBlock, selTagDBno, selTagByte));
          end;
      4:  //dint
          begin
            s7plc.SetDInt(selTagBlock, selTagDBno, selTagByte, spinInt.Value);
            Grid.Cells[5, selRowNo] :=IntToStr(s7plc.GetDInt(selTagBlock, selTagDBno, selTagByte));
          end;
      5:  //word
          begin
            s7plc.SetWord(selTagBlock, selTagDBno, selTagByte, spinInt.Value);
            Grid.Cells[5, selRowNo] :=IntToStr(s7plc.GetWord(selTagBlock, selTagDBno, selTagByte));
          end;
      6:  //dword
          begin
            s7plc.SetDWord(selTagBlock, selTagDBno, selTagByte, spinInt.Value);
            Grid.Cells[5, selRowNo] :=IntToStr(s7plc.GetDWord(selTagBlock, selTagDBno, selTagByte));
          end;
      7:  //float
          begin
            if edtTagFloat.Text ='' then edtTagFloat.Text :=edtTagFloat.TextHint;
            s7plc.SetFloat(selTagBlock, selTagDBno, selTagByte, StrToFloatDef(edtTagFloat.text,0));
            Grid.Cells[5, selRowNo] :=FloatToStr(s7plc.GetFloat(selTagBlock, selTagDBno, selTagByte));
          end;
    end
  else
  begin
    case dbnoComboBox.ItemIndex of
      0: selTagBlock :=S7AreaPE;
      1: selTagBlock :=S7AreaPA;
      2: selTagBlock :=S7AreaMK;
      else selTagBlock :=S7AreaDB;
    end;
    selTagDBno :=currDBno;
    if edtAddress.Text ='' then edtAddress.Text :=edtAddress.TextHint;
    selTagByte :=Trunc(StrToFloatDef(edtAddress.Text,0));
    selTagBit :=Round((StrToFloatDef(edtAddress.Text,0)-selTagByte)*10);
    if selTagBit>7 then selTagBit :=7;

    case selTagType of
      0:; //none
      1:  //bool
          begin
            s7plc.SetBoolean(selTagBlock, selTagDBno, selTagByte, selTagBit, chkTagBool.Checked);
            lblTagBlock.Caption :=BoolToStr(s7plc.GetBoolean(selTagBlock, selTagDBno, selTagByte, selTagBit), True);
          end;
      2:  //byte
          begin
            s7plc.SetByte(selTagBlock, selTagDBno, selTagByte, spinInt.Value);
            lblTagBlock.Caption :=IntToStr(s7plc.GetByte(selTagBlock, selTagDBno, selTagByte));
          end;
      3:  //int
          begin
            s7plc.SetInt(selTagBlock, selTagDBno, selTagByte, spinInt.Value);
            lblTagBlock.Caption :=IntToStr(s7plc.GetInt(selTagBlock, selTagDBno, selTagByte));
          end;
      4:  //dint
          begin
            s7plc.SetDInt(selTagBlock, selTagDBno, selTagByte, spinInt.Value);
            lblTagBlock.Caption :=IntToStr(s7plc.GetDInt(selTagBlock, selTagDBno, selTagByte));
          end;
      5:  //word
          begin
            s7plc.SetWord(selTagBlock, selTagDBno, selTagByte, spinInt.Value);
            lblTagBlock.Caption :=IntToStr(s7plc.GetWord(selTagBlock, selTagDBno, selTagByte));
          end;
      6:  //dword
          begin
            s7plc.SetDWord(selTagBlock, selTagDBno, selTagByte, spinInt.Value);
            lblTagBlock.Caption :=IntToStr(s7plc.GetDWord(selTagBlock, selTagDBno, selTagByte));
          end;
      7:  //float
          begin
            s7plc.SetFloat(selTagBlock, selTagDBno, selTagByte, StrToFloatDef(edtTagFloat.text,0));
            lblTagBlock.Caption :=FloatToStr(s7plc.GetFloat(selTagBlock, selTagDBno, selTagByte));
          end;
    end;
  end;
end;

procedure TfrmMain.chkAppendClick(Sender: TObject);
begin
  if chkAppend.Checked then chkAppend.Caption :='Append' else chkAppend.Caption :='Overwrite';
end;

procedure TfrmMain.chkDBFromClick(Sender: TObject);
begin
  if chkDBFrom.Checked then chkDBFrom.Caption :='PLC' else chkDBFrom.Caption :='Buffer';
end;

procedure TfrmMain.chkTagBoolClick(Sender: TObject);
begin
  chkTagBool.Caption :=BoolToStr(chkTagBool.checked, True);
end;

procedure TfrmMain.dbnoComboBoxChange(Sender: TObject);
begin
  if dbnoComboBox.ItemIndex >2 then
    currDBno :=StrToInt(dbnoComboBox.Text)
  else
    currDBno :=0;
end;

procedure TfrmMain.edtRegularChange(Sender: TObject);
begin
  if not chkAppend.Checked then
    ReadCells(excelWhole);
  btnClear.Enabled :=Length(Trim(edtRegular.Text))<>0;
end;

procedure TfrmMain.edtRegularKeyPress(Sender: TObject; var Key: Char);
begin
  if chkAppend.Checked and (Key = #13) then   ReadCells(excelWhole);
end;

procedure TfrmMain.edtTagFloatKeyPress(Sender: TObject; var Key: Char);
begin
if not (key in ['0'..'9','.',#8]) then
  key:=#0;
if (key='.') and (Pos('.', (Sender as TEdit).Text)>0)   then
  key:=#0;
end;

procedure TfrmMain.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  XLS.Free;
  XLSR.Free;
  XLSW.Free;
  s7plc.Free;
end;


//modify source code unit :XLSGrid5.pas line 877;
procedure TfrmMain.FormCreate(Sender: TObject);
var
  plcfile, tagfile :string;
begin
  reConnect :=False;
  s7plc :=TSimatic.Create ;
  XLS :=TXLSReadWriteII5.Create(Nil);
  XLSR :=TXLSReadWriteII5.Create(Nil);
  XLSR.Add;
  XLSW :=TXLSReadWriteII5.Create(Nil);
  xlsGrid.DefaultRowHeight :=23;
  xlsGrid.Height :=600;
  Self.Top :=30;
  self.Left :=600;

  InitCtrl;
  bxml.FileName :='C:\Users\hao.zhao\Desktop\S7PLC\config.xml';
  Self.Caption :='Simatic - ' + ReadXml('prjName');
  ipAddrEdit.Text :=ReadXml('plcIP');
  rackSpin.Value :=StrToIntDef(ReadXml('plcRack'),0);
  slotSpin.Value :=StrToIntDef(ReadXml('plcSlot'),2);
  xlsOpenDlg.InitialDir :=ReadXml('WorkDir');
  plcfile :=ReadXml('plcExcel');
  lblXlsfile.Caption :=plcfile;
  tagfile :=ReadXml('tagExcel');
  lblReadFileName.Caption :=tagfile;
  tagxlsOpen :=StrToBool(ReadXml('plcExcelAutoOpen'));
  plcxlsOpen :=StrToBool(ReadXml('tagExcelAutoOpen'));
  tagsEdit :=StrToBool(ReadXml('tagsEdit'));
  plcEdit :=StrToBool(ReadXml('plcEdit'));
  s7plc.minDBno :=StrToInt(ReadXml('MinDBno'));
  s7plc.maxDBno :=StrToInt(ReadXml('MaxDBno'));
  if plcxlsOpen then
  begin
    if FileExists(plcfile) then
    begin
      XLS.Filename :=plcfile;
      XLS.Read ;
      excelWhole :=XLS[indexSheet];
      ReadCells(XLS[indexSheet]);
    end;
  end;
  if trim(ReadXml('prjCode')) ='' then
    Self.Caption :='Simatic - ' + ReadXml('prjName')
  else
    Self.Caption :='Simatic - ' + ReadXml('prjName') + ' - ' + ReadXml('prjCode');
  cs1.SendXmlFile('',bxml.FileName);
end;

procedure TfrmMain.InitCtrl();
begin
  Grid.Cells[0,0] :='Index';
  Grid.Cells[1,0] :='Tag Name';
  Grid.Cells[2,0] :='Block';
  Grid.Cells[3,0] :='Address';
  Grid.Cells[4,0] :='Type';
  Grid.Cells[5,0] :='Value';
  Grid.ColWidths[0] :=50 ;
  Grid.ColWidths[1] :=220 ;
  Grid.ColWidths[2] :=60 ;
  Grid.ColWidths[3] :=60 ;
  Grid.ColWidths[4] :=60 ;
  Grid.ColWidths[5] :=60 ;
  lblTagName.Caption :='';
  lblTagBlock.Caption :='';
  lblTagAddr.Caption :='';
  lblTagType.Caption :='';
  chkTagBool.Visible :=False;
  edtTagFloat.Visible :=False;
  spinInt.Visible :=False;
  btnTagWrite.Visible :=False;
end;

procedure TfrmMain.GridDrawCell(Sender: TObject; ACol, ARow: Integer;
  Rect: TRect; State: TGridDrawState);
var
  sText: String;
  iTextWidth, vTop: Integer;
  rNum: Double;
  s: String;
  R: TRect;
begin
  inherited;
  vTop :=0;
  with Grid do
  begin
    sText := Cells[ACol, ARow];                                                               //輸出內容
    iTextWidth := canvas.TextWidth(sText);                                                    //輸出內容寬度

    if ARow = 0 then
      Canvas.TextRect(Rect, (Rect.left+Rect.right-iTextWidth) div 2, Rect.Top+vTop, sText);      //第1行, 居中
    case ACol of
      0,2,4,5: Canvas.TextRect(Rect, (Rect.left+Rect.right-iTextWidth) div 2, Rect.Top+vTop, sText);   //第0列, 居中
      1: Canvas.TextRect(Rect, Rect.Left+2, Rect.top+vTop, sText);                               //第1列, 左對齊
      3: Canvas.TextRect(Rect, Rect.right - iTextWidth - 2 ,Rect.Top + vTop, sText);             //第4列, 右对齐
    end;

//  begin
//    //如果<0以紅色顯示
//    if TryStrToFloat(sText, rNum) and (rNum < 0) then
//      Canvas.Font.Color := clRed
//    else
//      Canvas.Font.Color := clWindowText;
//  end;
  end;
  if ARow = Grid.Row then
  begin
    TStringGrid(Sender).Canvas.Brush.Color := clmoneygreen;
    S := TStringGrid(Sender).Cells[ACol, ARow];
    R := TStringGrid(Sender).CellRect(ACol, ARow);
    TStringGrid(Sender).Canvas.FillRect(R);
    TStringGrid(Sender).Canvas.Font.Color := clTeal ;
    TStringGrid(Sender).Canvas.TextOut(R.Left, R.Top, S);
  end;
end;

procedure TfrmMain.GridMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  if Grid.RowCount = 2 then
    gridClk :=False
  else
    gridClk :=True;
end;

procedure TfrmMain.GridSelectCell(Sender: TObject; ACol, ARow: Integer;
  var CanSelect: Boolean);
var
  vAddr :single;
begin
  lblTagName.Caption :=Grid.Cells[1,ARow];
  lblTagBlock.Caption :=Grid.Cells[2,ARow];
  lblTagAddr.Caption :=Grid.Cells[3,ARow];
  lblTagType.Caption :=Grid.Cells[4,ARow];

  selRowNo :=ARow;
  if LowerCase(Grid.Cells[4,ARow]) = 'bool' then
    selTagType :=1
  else if LowerCase(Grid.Cells[4,ARow]) = 'byte' then
    selTagType :=2
  else if LowerCase(Grid.Cells[4,ARow]) = 'int' then
    selTagType :=3
  else if LowerCase(Grid.Cells[4,ARow]) = 'dint' then
    selTagType :=4
  else if LowerCase(Grid.Cells[4,ARow]) = 'word' then
    selTagType :=5
  else if LowerCase(Grid.Cells[4,ARow]) = 'dword' then
    selTagType :=6
  else if LowerCase(Grid.Cells[4,ARow]) = 'float' then
    selTagType :=7;

  if LowerCase(Grid.Cells[2,ARow]) = 'i' then
  begin
    selTagBlock :=S7AreaPE;
    selTagDBno :=0;
  end
  else if LowerCase(Grid.Cells[2,ARow]) = 'q' then
  begin
    selTagBlock :=S7AreaPA;
    selTagDBno :=0;
  end
  else if LowerCase(Grid.Cells[2,ARow]) = 'm' then
  begin
    selTagBlock :=S7AreaMK;
    selTagDBno :=0;
  end
  else if LeftStr(LowerCase(Grid.Cells[2,ARow]),2) = 'db' then
  begin
    selTagBlock :=S7AreaDB;
    selTagDBno :=StrToInt(Trim(RightStr(Grid.Cells[2,ARow],length(Grid.Cells[2,ARow])-3)));
  end;

  if  Grid.Cells[3,ARow] ='' then
    vAddr :=0
  else
    vAddr :=StrToFloatDef(Grid.Cells[3,ARow],0);
  selTagByte :=Trunc(vAddr);
  selTagBit :=Round((vAddr - selTagByte)*10);

  if LowerCase(Grid.Cells[4,ARow]) = 'bool' then
  begin
    chkTagBool.Visible :=True;
    edtTagFloat.Visible :=False;
    spinInt.Visible :=False;

    if LowerCase(Grid.Cells[5,ARow]) = 'true' then
    begin
       chkTagBool.Checked :=True;
       chkTagBool.Caption :='True';
    end
    else
    begin
       chkTagBool.Checked :=False;
       chkTagBool.Caption :='False';
    end;

  end
  else if (LowerCase(Grid.Cells[4,ARow]) = 'bool') or
          (LowerCase(Grid.Cells[4,ARow]) = 'int') or
          (LowerCase(Grid.Cells[4,ARow]) = 'dint') or
          (LowerCase(Grid.Cells[4,ARow]) = 'word') or
          (LowerCase(Grid.Cells[4,ARow]) = 'dword') then
  begin
    chkTagBool.Visible :=False;
    edtTagFloat.Visible :=False;
    spinInt.Visible :=True;
    if LowerCase(Grid.Cells[5,ARow]) = '' then
       spinInt.Value :=0
    else
       spinInt.Value :=StrToIntDef(Grid.Cells[5,ARow],0);
  end
  else if (LowerCase(Grid.Cells[4,ARow]) = 'float') then
       begin
         chkTagBool.Visible :=False;
         edtTagFloat.Visible :=True;
         spinInt.Visible :=False;
         if (LowerCase(Grid.Cells[5,ARow]) = '') or
           (LowerCase(Grid.Cells[5,ARow]) = 'error') then
           edtTagFloat.Text :='0.0'
         else
           edtTagFloat.Text :=Grid.Cells[5,ARow];
       end;
  case selTagBlock of
    S7AreaPE :dbnoComboBox.ItemIndex :=0;
    S7AreaPA :dbnoComboBox.ItemIndex :=1;
    S7Areamk :dbnoComboBox.ItemIndex :=2;
    else
    begin
      dbnoComboBox.ItemIndex :=dbnoComboBox.Items.IndexOf(IntToStr(selTagDBno));
      currDBno :=selTagDBno;
    end;
  end;
  btnTagWrite.visible :=gridClk;
  dbnoComboBox.Visible :=False;
  edtAddress.Visible :=False;
  lblTagAddr.Visible :=True;
  lblTagType.Visible :=True;
end;

procedure TfrmMain.lblTagNameClick(Sender: TObject);
begin
  if not dbnoComboBox.Visible then
  begin
    dbnoComboBox.Visible :=True;
    edtAddress.Visible :=True;
    lblTagBlock.Caption :='';
    lblTagAddr.Visible :=False;
  end
  else
  begin
    dbnoComboBox.Visible :=False;
    edtAddress.Visible :=False;
    lblTagBlock.Caption :='';
    lblTagAddr.Visible :=True;
  end;
end;

procedure TfrmMain.lblTagTypeClick(Sender: TObject);
begin
  if not s7Plc.Connected then exit ;
  
  if dbnoComboBox.Visible then
  begin
    case dbnoComboBox.ItemIndex of
      0: selTagBlock :=S7AreaPE;
      1: selTagBlock :=S7AreaPA;
      2: selTagBlock :=S7AreaMK;
      else selTagBlock :=S7AreaDB;
    end;
    selTagDBno :=currDBno;
    if edtAddress.Text ='' then edtAddress.Text :=edtAddress.TextHint;

    selTagByte :=Trunc(StrToFloatDef(edtAddress.Text,0));
    selTagBit :=Round((StrToFloatDef(edtAddress.Text,0)-selTagByte)*10);
    if selTagBit>7 then selTagBit :=7;

    case selTagType of
      0:; //none
      1:  //bool
            lblTagBlock.Caption :=BoolToStr(s7plc.GetBoolean(selTagBlock, selTagDBno, selTagByte, selTagBit), True);
      2:  //byte
            lblTagBlock.Caption :=IntToStr(s7plc.GetByte(selTagBlock, selTagDBno, selTagByte));
      3:  //int
            lblTagBlock.Caption :=IntToStr(s7plc.GetInt(selTagBlock, selTagDBno, selTagByte));
      4:  //dint
            lblTagBlock.Caption :=IntToStr(s7plc.GetDInt(selTagBlock, selTagDBno, selTagByte));
      5:  //word
            lblTagBlock.Caption :=IntToStr(s7plc.GetWord(selTagBlock, selTagDBno, selTagByte));
      6:  //dword
            lblTagBlock.Caption :=IntToStr(s7plc.GetDWord(selTagBlock, selTagDBno, selTagByte));
      7:  //float
            lblTagBlock.Caption :=FloatToStr(s7plc.GetFloat(selTagBlock, selTagDBno, selTagByte));
    end;
  end;
end;

procedure TfrmMain.N1Click(Sender: TObject);
begin
  if tagsEdit and not xlsConverted then
  begin
    xlsGrid.XLS.SaveToFile(inXls);
    XLSR.Filename :=inXls;
    XLSR.Read;
  end;

  if plcEdit and xlsConverted then
  begin
    xlsGrid.XLS.SaveToFile(outXls);
    XLSR.Filename :=outXls;
    XLSR.Read;
  end;
end;

procedure TfrmMain.btntagplcClick(Sender: TObject);
begin
  if xlsOpenDlg.Execute then
  begin
    lblReadFileName.Caption :=xlsOpenDlg.FileName;
    inXls :=xlsOpenDlg.FileName;
    XLSR.Filename :=inXls;
    XLSR.Read;
    outXls :=ChangeFileExt(ExtractFilePath(inXls) + 'plc_' + ExtractFileName(inXls),'.xlsx');
    lblWriteFileName.Caption :=ChangeFileExt('plc_' + ExtractFileName(inXls),'.xlsx');
    xlsGrid.XLS.Filename :=inXls;
    xlsGrid.XLS.Read;
    xlsGrid.DefaultRowHeight :=23;
    xlsGrid.Height :=600;
    xlsConverted :=False;
    N1.Enabled :=tagsEdit ;
    if tagsEdit then
      xlsGrid.Options :=xlsGrid.Options + [goEditing]
    else
      xlsGrid.Options :=xlsGrid.Options - [goEditing];
  end;
  InitCtrl;
end;

procedure TfrmMain.btnConvertClick(Sender: TObject);
begin
  XLSW :=TranslationXLS(XLSR[0]);
  XLSW.Filename :=outXls;
  XLSW.Write;
  pgbWrite.Position :=100;
  xlsGrid.XLS.Filename :=outXls;
  xlsGrid.XLS.Read;
  xlsGrid.ColCount :=27;
  XLS.Filename :=outXls;
  XLS.Read ;
  excelWhole :=XLS[indexSheet];
  ReadCells(XLS[indexSheet]);
  xlsGrid.DefaultRowHeight :=23;
  xlsGrid.Height :=600;
  xlsConverted :=True;
  N1.Enabled :=plcEdit;
  if plcEdit then
    xlsGrid.Options :=xlsGrid.Options + [goEditing]
  else
    xlsGrid.Options :=xlsGrid.Options - [goEditing];
  InitCtrl;
end;

procedure TfrmMain.btnConvertMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  x0 :=x;
  y0 :=y;
  md :=True;
end;

procedure TfrmMain.btnConvertMouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
//  if md then
//  begin
//    (Sender as TBitBtn).Left :=(Sender as TBitBtn).Left -x0 + x;
//    (Sender as TBitBtn).Top :=(Sender as TBitBtn).Top -y0 + y;
//  end;
end;

procedure TfrmMain.btnConvertMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  md :=False;
end;

procedure TfrmMain.btnClearClick(Sender: TObject);
begin
  edtRegular.Text :='';
end;

procedure TfrmMain.btnConnectClick(Sender: TObject);
var
  res :integer;
  info :TS7CpuInfo ;
begin
  res :=12;
  try
    if not reConnect then
    begin
      s7plc.plcIp :=ipAddrEdit.Text ;
      s7plc.plcRack :=rackSpin.Value ;
      s7plc.plcSlot :=slotSpin.Value ;
      res :=s7plc.ConnectPLC(reConnect);
      reConnect :=True;
    end
    else
      res :=s7plc.ConnectPLC(reConnect);
    if not s7plc.Connected then
    begin
      btnConnect.Enabled :=True;
      btnDisconnect.Enabled :=False;
      btnReadPlc.Enabled :=False;
      chkDBFrom.Enabled :=False;
      ipAddrEdit.Enabled :=True;
      rackSpin.Enabled :=True;
      slotSpin.Enabled :=True;
      //Application.MessageBox('PLC connect failure, Please try.','Connection', MB_OK);
      MessageDlg('PLC connect failure, Please try!',mtError, [mbOK],0);
      exit ;
    end
    else
    begin
      btnConnect.Enabled :=False;
      ipAddrEdit.Enabled :=False;
      btnDisconnect.Enabled :=True;
      btnReadPlc.Enabled :=True;
      chkDBFrom.Enabled :=True;
      ipAddrEdit.Enabled :=False;
      rackSpin.Enabled :=False;
      slotSpin.Enabled :=False;
    end;

    dbnoComboBox.Items.Clear ;

//    for var item in s7plc.BlockItem do
//      if item.no >= 0 then
//         dbnoComboBox.Items.Add(inttostr(item.no));

    dbnoComboBox.Items.Add('I');
    dbnoComboBox.Items.Add('Q');
    dbnoComboBox.Items.Add('M');
    for var i :=0 to s7plc.validBlocks -1 do
      dbnoComboBox.Items.Add(inttostr(s7plc.BlockItem[i].no));

    if dbnoComboBox.Items.Count >=3 then
    begin
      dbnoComboBox.ItemIndex :=3;
      currDBno :=StrToIntDef(dbnoComboBox.Text,-1);
    end
    else
    begin
      dbnoComboBox.ItemIndex :=0;
      currDBno :=0;
    end;

    info :=s7plc.GetCPUInfo;
    lblInfo.Caption :=info.ModuleTypeName + ' / ' + info.SerialNumber + ' / ' + info.ASName + ' / ' + info.ModuleName + ' / ' + info.Copyright;
    case res of
      0: sharpStatus.Brush.Color :=clGray;
      4: sharpStatus.Brush.Color :=clSkyBlue;
      8: sharpStatus.Brush.Color :=clLime;
      12: sharpStatus.Brush.Color :=clRed;
    end;

  except on e: Exception do
    //Application.MessageBox('PLC connected unsuccuessful, Please try.', 'Connection', MB_OK) ;
    MessageDlg('PLC connected unsuccuessful, Please try!', mtError, [mbOK],0);
  end;
end;

procedure TfrmMain.btnDisconnectClick(Sender: TObject);
var
  res :integer;
begin
  res :=s7plc.DisconnectPlc;
  if res =0 then
    self.Caption :='Disconnected';
  btnConnect.Enabled :=True;
  btnDisconnect.Enabled :=False;
  sharpStatus.Brush.Color :=clRed;
  chkDBFrom.Enabled :=False;
  ipAddrEdit.Enabled :=True;
  rackSpin.Enabled :=True;
  slotSpin.Enabled :=True;
end;

procedure TfrmMain.ReadCells(xlsWkSheet :TXLSWorksheet);
var
  c, r, rStore :integer;
  ref, rex :string;
  cnt, subRows :integer;
  CellType :TXLSCellType;
  vAddRow :boolean;
  vAppend :boolean;

begin

  vAddRow :=False;
  if XLSR.Count = 1 then XLSR.Add ;
  XLSR[1].CalcDimensions;
  vAppend :=chkAppend.Checked ;
  xlsWkSheet.CalcDimensions;
  tagCount :=xlsWkSheet.LastRow-xlsWkSheet.FirstRow+1;
  Grid.ColCount :=xlsWkSheet.LastCol-xlsWkSheet.FirstCol+2;
  subRows :=GetRexRows(xlsWkSheet);

  if (Trim(edtRegular.Text) <> '') and vAppend then                             //part and append
  begin
    rStore :=XLSR[1].LastRow+1;
    cnt :=rStore ;
    //self.Caption :=format(' Old_Count=%d,  New_Count=%d,  Start_Row=%d,  Grid_Rows= %d ',[rstore,subrows, cnt+1,Grid.RowCount]);
  end
  else                                                                          //all or overwrite
  begin
    rStore :=0;
    cnt :=0;
    XLSR[1].DeleteColumns(0,4);
    //self.Caption :=format(' Old_Count=%d,  New_Count=%d,  Start_Row=%d,  Grid_Rows= %d ',[rstore,subrows, cnt+1,Grid.RowCount]);
  end;
  Grid.RowCount :=subRows + rStore +1;
  tagCount :=subRows + rStore;

  lblCount.Caption :=IntToStr(tagCount);
  if subRows =0 then                                                            //empty
  begin
    Grid.RowCount :=1 ;
    XLSR[1].DeleteColumns(0,4);
    exit;
  end;

  if not vAppend then
    for C := 0 to 5 do
      Grid.Cols[C].Clear ;

  for R := xlsWkSheet.FirstRow to xlsWkSheet.LastRow do
  begin
    for C := xlsWkSheet.FirstCol to xlsWkSheet.LastCol do
    begin
      ref :=ColRowToRefStr(C,R);

      CellType :=xlsWkSheet.CellType[C,R];
      if Trim(edtRegular.Text)='' then
        rex :='.*'
      else
        rex :=Trim(edtRegular.Text);

      if (CellType <> xctNone) and (TRegEx.IsMatch(xlsWkSheet.AsString[1,R], rex,[roIgnoreCase,roMultiLine])) then
      begin
        case C of
          0:;
          1: Grid.Cells[C,Cnt+1] :=xlsWkSheet.AsString[C,R];
          2:
            case xlsWkSheet.AsInteger[C,R] of
              1: Grid.Cells[C,Cnt+1] :='I';
              2: Grid.Cells[C,Cnt+1] :='Q';
              3: Grid.Cells[C,Cnt+1] :='M';
              4:
                case CellType of
                  xctBlank: Grid.Cells[C,cnt+1] :='';
                  xctBoolean: if xlsWkSheet.AsBoolean[C,R] then Grid.Cells[C,cnt+1] :='True' else Grid.Cells[C,cnt+1] :='False';
                  xctString: Grid.Cells[C,cnt+1] :=xlsWkSheet.AsString[C,R];
                  xctFloat: Grid.Cells[C,cnt+1] :=FloatToStr(xlsWkSheet.AsFloat[C,R]);
                end;
              else Grid.Cells[C,Cnt+1] :='DB ' + xlsWkSheet.AsString[C,R];
            end;
          3: Grid.Cells[C,Cnt+1] :=format('%.1f',[xlsWkSheet.AsFloat[C,R]]);
          4: Grid.Cells[C,Cnt+1] :=xlsWkSheet.AsString[C,R];
        end;
        if (Trim(edtRegular.Text) <> '') then
        begin
          XLSR[1].AsString[0,rStore] :=IntToStr(rStore);
          XLSR[1].AsString[1,rStore] :=Grid.Cells[1,Cnt+1];
          XLSR[1].AsString[2,rStore] :=Grid.Cells[2,Cnt+1];
          XLSR[1].AsString[3,rStore] :=Grid.Cells[3,Cnt+1];
          XLSR[1].AsString[4,rStore] :=Grid.Cells[4,Cnt+1];
        end
        else
          XLSR[1].DeleteColumns(0,4);

//        case CellType of
//          xctBlank: Grid.Cells[C,cnt+1] :='Blank';
//          xctBoolean: if xlsWkSheet.AsBoolean[C,R]  then  Grid.Cells[C,cnt+1] :='True'  else  Grid.Cells[C,cnt+1] :='False';
//          xctString: Grid.Cells[C,cnt+1] :=xlsWkSheet.AsString[C,R];
//          xctFloat: Grid.Cells[C,cnt+1] :=FloatToStr(xlsWkSheet.AsFloat[C,R]);
//        end;
        vAddRow :=True;
      end
      else vAddRow :=False;
      Grid.Cells[0,R+1] :=IntToStr(R+1);
    end;
    if vAddRow then begin Inc(cnt); Inc(rStore); {Grid.Cells[0,R+1] :=IntToStr(R+1);}  end;
    if cnt > Grid.RowCount then Exit;
  end;
  gridClk :=False;
  Grid.Row :=1;
  InitCtrl;
end;

//CS1.SendFmtMsg(' Old_Count=%d,  New_Count=%d,  Start_Row=%d,  Grid_Rows= %d ',[rstore,subrows, cnt+1,Grid.RowCount]);

function TfrmMain.GetRexRows(xlsWkSheet :TXLSWorksheet) :integer;
var
  R:integer;
  rex :string;
  cnt :integer;
  CellType :TXLSCellType;
begin
  cnt :=0;
  xlsWkSheet.CalcDimensions;
  for R := xlsWkSheet.FirstRow to xlsWkSheet.LastRow do
  begin
    CellType :=xlsWkSheet.CellType[4,R];
    if Trim(edtRegular.Text)='' then
      rex :='.*'
    else
      rex :=Trim(edtRegular.Text);
    if (CellType <> xctNone) and (TRegEx.IsMatch(xlsWkSheet.AsString[1,R], rex,[roIgnoreCase,roMultiLine])) then
      Inc(cnt);
  end;
  Result :=cnt;
end;

end.
