unit S7Simatic;

interface

uses
  System.SysUtils, step7;

const
  bufferSize = 4096;
  DBCount = 100;
  minDB = 30;
  maxDB = 100;

type
  TBlockBuffer = array [0 .. bufferSize - 1] of byte; // 4 K buffer
  TTagBuffer = array [0 .. 3] of byte;
  TByteBuffer = array [0 .. 0] of byte;
  TBitBuffer = array [0 .. 0] of boolean;

  TDBItem = record
    no: word;
    MaxLen: word;
    Content: TBlockBuffer;
  end;

  TSimatic = class
  private
    S7: TS7Helper;
    nullBuffer: TBlockBuffer;
    nullTagArray: TTagBuffer;
    execReturn, tagLength, size: integer;
    ok: integer; // Number of test pass
    ko: integer; // Number of test failure

    function hexDump(mem: pointer; count: integer): string;
    function Check(iResult: integer; sFunction: string): boolean;

    function GetDBInfofromPLC(vDBno: integer): TDBItem;
    function GetIntfromPLC(vArea, vDBno, vStart: word): integer;
    function GetIntfromBuffer(vBuffer: TBlockBuffer; vStart: word): integer;
    function CompareDBLength(vDBno, vByte, vLen: word): boolean;

  public
    plc: TS7Client;
    plcIp: string;
    plcRack, plcSlot: byte;
    Connected: boolean;
    BlockItem: array of TDBItem;
    canBlock :integer;
    constructor Create;
    destructor Destroy;

    function ConnectPLC(reConnect: boolean = false): integer;
    function DisconnectPlc(): integer;
    function GetCPUInfo(): TS7CpuInfo;

    function GetBlock(vDBno: integer): TBlockBuffer;
    function GetBlocks(): integer;

    function GetBoolean(vArea, vDBno, vStart: word; vBit: byte): boolean;
    function GetByte(vArea, vDBno, vStart: word): UInt8;
    function GetInt(vArea, vDBno, vStart: word): Int16;
    function GetWord(vArea, vDBno, vStart: word): UInt16;
    function GetDInt(vArea, vDBno, vStart: word): Int32;
    function GetDWord(vArea, vDBno, vStart: word): UInt32;
    function GetFloat(vArea, vDBno, vStart: word): Single;

    procedure SetBoolean(vArea, vDBno, vStart: word; vBit: byte;
      vValue: boolean);
    procedure SetBytebit(vArea, vDBno, vStart: word; vBit: byte;
      vValue: boolean);
    procedure SetByte(vArea, vDBno, vStart: word; vValue: byte);
    procedure SetInt(vArea, vDBno, vStart: word; vValue: Int16);
    procedure SetWord(vArea, vDBno, vStart: word; vValue: UInt16);
    procedure SetDInt(vArea, vDBno, vStart: word; vValue: Int32);
    procedure SetDWord(vArea, vDBno, vStart: word; vValue: UInt32);
    procedure SetFloat(vArea, vDBno, vStart: word; vValue: Single);
  end;

implementation

(* =============================================================================|
  |  Set Bool, byte, int, dint, word ,dword, float                                     |
  |  diectly set data to PLC                                                     |
  |==============================================================================| *)

procedure TSimatic.SetBoolean(vArea, vDBno, vStart: word; vBit: byte;
  vValue: boolean);
var
  byteArray: TByteBuffer;
  bitArray: TBitBuffer;
begin
  bitArray[0] := vValue;
  plc.WriteArea(vArea, vDBno, vStart * 8 + vBit, 1, S7WLBit, @bitArray);

  // byteArray[0] :=GetByte(vArea, vDBno, vStart);;
  // S7.SetBit(@byteArray, vBit, vValue);
  // plc.WriteArea(vArea, vDBno, vStart, 1, S7WLByte, @byteArray);
end;

procedure TSimatic.SetBytebit(vArea, vDBno, vStart: word; vBit: byte;
  vValue: boolean);
var
  byteArray: TByteBuffer;
begin
  byteArray[0] := GetByte(vArea, vDBno, vStart);;
  S7.SetBit(@byteArray, vBit, vValue);
  plc.WriteArea(vArea, vDBno, vStart, 1, S7WLByte, @byteArray);
end;

procedure TSimatic.SetByte(vArea, vDBno, vStart: word; vValue: byte);
var
  byteArray: TByteBuffer;
begin
  byteArray[0] := vValue;
  plc.WriteArea(vArea, vDBno, vStart, 1, S7WLByte, @byteArray);
end;

procedure TSimatic.SetInt(vArea, vDBno, vStart: word; vValue: Int16);
var
  tagArray: TTagBuffer;
begin
  S7.SetInt(@tagArray, vValue);
  plc.WriteArea(vArea, vDBno, vStart, 1, S7WLInt, @tagArray);
end;

procedure TSimatic.SetWord(vArea, vDBno, vStart: word; vValue: UInt16);
var
  tagArray: TTagBuffer;
begin
  S7.SetWord(@tagArray, vValue);
  plc.WriteArea(vArea, vDBno, vStart, 1, S7WLWord, @tagArray);
end;

procedure TSimatic.SetDInt(vArea, vDBno, vStart: word; vValue: Int32);
var
  tagArray: TTagBuffer;
begin
  S7.SetDInt(@tagArray, vValue);
  plc.WriteArea(vArea, vDBno, vStart, 1, S7WLDInt, @tagArray);
end;

procedure TSimatic.SetDWord(vArea, vDBno, vStart: word; vValue: UInt32);
var
  tagArray: TTagBuffer;
begin
  S7.SetDWord(@tagArray, vValue);
  plc.WriteArea(vArea, vDBno, vStart, 1, S7WLDWord, @tagArray);
end;

procedure TSimatic.SetFloat(vArea, vDBno, vStart: word; vValue: Single);
var
  tagArray: TTagBuffer;
begin
  S7.SetReal(@tagArray, vValue);
  plc.WriteArea(vArea, vDBno, vStart, 1, S7WLReal, @tagArray);
end;

(* =============================================================================|
  |  Get Bool, byte, int, dint, word ,dword, float,                                     |
  |  S7AreaBUFF not diectly from PLC, get data from buffer                  |
  |==============================================================================| *)

function TSimatic.GetInt(vArea, vDBno, vStart: word): Int16;
var
  i: word;
  Buffer: TBlockBuffer;
  tagArray: TTagBuffer;
begin
  size := SizeOf(Buffer);
  Buffer := nullBuffer;
  tagArray := nullTagArray;
  tagLength := 2;
  if vArea = S7AreaDB then
    execReturn := plc.DBRead(vDBno, 0, size, @Buffer)
  else if vArea = S7AreaBUFF then
    Buffer := GetBlock(vDBno)
  else
  begin
    execReturn := plc.ReadArea(vArea, vDBno, vStart, 1, S7WLWord, @tagArray);
    result := S7.GetInt(@tagArray);
    Exit
  end;
  for i := vStart to vStart + tagLength - 1 do
    tagArray[i - vStart] := Buffer[i];
  result := S7.GetInt(@tagArray)
end;

function TSimatic.GetWord(vArea, vDBno, vStart: word): UInt16;
var
  i: word;
  Buffer: TBlockBuffer;
  tagArray: TTagBuffer;
begin
  size := SizeOf(Buffer);
  Buffer := nullBuffer;
  tagArray := nullTagArray;
  tagLength := 2;
  if vArea = S7AreaDB then
    execReturn := plc.DBRead(vDBno, 0, size, @Buffer)
  else if vArea = S7AreaBUFF then
    Buffer := GetBlock(vDBno)
  else
  begin
    execReturn := plc.ReadArea(vArea, vDBno, vStart, 1, S7WLWord, @tagArray);
    result := S7.GetWord(@tagArray);
    Exit;
  end;

  for i := vStart to vStart + tagLength - 1 do
    tagArray[i - vStart] := Buffer[i];
  result := S7.GetWord(@tagArray)
end;

function TSimatic.GetDInt(vArea, vDBno, vStart: word): Int32;
var
  i: word;
  Buffer: TBlockBuffer;
  tagArray: TTagBuffer;
begin
  size := SizeOf(Buffer);
  Buffer := nullBuffer;
  tagArray := nullTagArray;
  tagLength := 4;
  if vArea = S7AreaDB then
    execReturn := plc.DBRead(vDBno, 0, size, @Buffer)
  else if vArea = S7AreaBUFF then
    Buffer := GetBlock(vDBno)
  else
  begin
    execReturn := plc.ReadArea(vArea, vDBno, vStart, 1, S7WLDWord, @tagArray);
    result := S7.GetDInt(@tagArray);
    Exit;
  end;
  for i := vStart to vStart + tagLength - 1 do
    tagArray[i - vStart] := Buffer[i];
  result := S7.GetDInt(@tagArray)
end;

function TSimatic.GetDWord(vArea, vDBno, vStart: word): UInt32;
var
  i: word;
  Buffer: TBlockBuffer;
  tagArray: TTagBuffer;
begin
  size := SizeOf(Buffer);
  Buffer := nullBuffer;
  tagArray := nullTagArray;
  tagLength := 4;
  if vArea = S7AreaDB then
    execReturn := plc.DBRead(vDBno, 0, size, @Buffer)
  else if vArea = S7AreaBUFF then
    Buffer := GetBlock(vDBno)
  else
  begin
    execReturn := plc.ReadArea(vArea, vDBno, vStart, 1, S7WLDWord, @tagArray);
    result := S7.GetDWord(@tagArray);
    Exit;
  end;
  for i := vStart to vStart + tagLength - 1 do
    tagArray[i - vStart] := Buffer[i];
  result := S7.GetDWord(@tagArray)
end;

function TSimatic.GetFloat(vArea, vDBno, vStart: word): Single;
var
  i: word;
  Buffer: TBlockBuffer;
  tagArray: TTagBuffer;
begin
  size := SizeOf(Buffer);
  Buffer := nullBuffer;
  tagArray := nullTagArray;
  tagLength := 4;
  if vArea = S7AreaDB then
    execReturn := plc.DBRead(vDBno, 0, size, @Buffer)
  else if vArea = S7AreaBUFF then
    Buffer := GetBlock(vDBno)
  else
  begin
    execReturn := plc.ReadArea(vArea, vDBno, vStart, 1, S7WLReal, @tagArray);
    result := S7.GetReal(@tagArray);
    Exit;
  end;
  for i := vStart to vStart + tagLength - 1 do
    tagArray[i - vStart] := Buffer[i];
  result := S7.GetReal(@tagArray)
end;

function TSimatic.GetByte(vArea, vDBno, vStart: word): UInt8;
var
  i: word;
  Buffer: TBlockBuffer;
  tagArray: TTagBuffer;
begin
  size := SizeOf(Buffer);
  Buffer := nullBuffer;
  tagArray := nullTagArray;
  tagLength := 2;
  if vArea = S7AreaDB then
    execReturn := plc.DBRead(vDBno, 0, size, @Buffer)
  else if vArea = S7AreaBUFF then
    Buffer := GetBlock(vDBno)
  else
  begin
    execReturn := plc.ReadArea(vArea, vDBno, vStart, 1, S7WLByte, @tagArray);
    result := tagArray[0];
    Exit;
  end;
  for i := vStart to vStart + tagLength - 1 do
    tagArray[i - vStart] := Buffer[i];
  result := tagArray[0]; // S7.GetWord(@tagArray) shr 8; this right.
end;

function TSimatic.GetBoolean(vArea, vDBno, vStart: word; vBit: byte): boolean;
var
  i: word;
  Buffer: TBlockBuffer;
  bitArray: TBitBuffer;
  tagArray: TTagBuffer;
  rangeArray: array [0 .. 9] of byte;
begin
  bitArray[0] := false;
  size := SizeOf(Buffer);
  Buffer := nullBuffer;
  tagArray := nullTagArray;
  tagLength := 1;
  if vArea = S7AreaDB then
    execReturn := plc.DBRead(vDBno, 0, size, @Buffer)
  else if vArea = S7AreaBUFF then
    Buffer := GetBlock(vDBno)
  else
  begin
    execReturn := plc.ReadArea(vArea, vDBno, vStart * 8 + vBit, 1, S7WLBit,
      @bitArray);
    result := bitArray[0];
    Exit
  end;

  // ****************************************************************************
  for i := 0 to 9 do
    rangeArray[i] := 0;

  if vStart > 890 then
    for i := vStart - 2 to vStart + 5 do
      rangeArray[i - vStart + 2] := Buffer[i];
  // ****************************************************************************

  for i := vStart to vStart + tagLength - 1 do
    tagArray[i - vStart] := Buffer[i];
  result := S7.GetBit(@tagArray, vBit)
end;

function TSimatic.GetDBInfofromPLC(vDBno: integer): TDBItem;
var
  info: TS7BlockInfo;
  Buffer: TBlockBuffer;
begin
  result.no := vDBno;
  execReturn := plc.GetAgBlockInfo(Block_DB, vDBno, @info);
  // Spec:info type.define->PS7BlockInfo, call->TS7BlockInfo
  result.MaxLen := info.MC7Size;
  size := SizeOf(Buffer);
  Buffer := nullBuffer;
  execReturn := plc.DBRead(vDBno, 0, size, @Buffer);
  result.Content := Buffer;
end;

function TSimatic.GetIntfromPLC(vArea, vDBno, vStart: word): integer;
var
  i: word;
  Buffer: TBlockBuffer;
  tagArray: TTagBuffer;
begin
  size := SizeOf(Buffer);
  Buffer := nullBuffer;
  tagArray := nullTagArray;
  tagLength := 2;
  execReturn := plc.DBRead(vDBno, 0, size, @Buffer);
  for i := vStart to vStart + tagLength - 1 do
    tagArray[i - vStart] := Buffer[i];
  result := S7.GetInt(@tagArray)
end;

function TSimatic.GetIntfromBuffer(vBuffer: TBlockBuffer; vStart: word)
  : integer;
var
  i: word;
  tagArray: TTagBuffer;
begin
  size := SizeOf(vBuffer);
  tagArray := nullTagArray;
  tagLength := 2;
  for i := vStart to vStart + tagLength - 1 do
    tagArray[i - vStart] := vBuffer[i];
  result := S7.GetInt(@tagArray)
end;

function TSimatic.GetBlocks(): integer;
var
  i, k, res, dbNumbers, size, iCount: integer;
  Buffer: TBlockBuffer;
  blockList: TS7BlocksList;
  blockNumList: array [0 .. DBCount - 1] of word; // PS7BlocksOfType;
begin
  size := SizeOf(Buffer);
  res := plc.ListBlocks(@blockList);
  k := 0;
  for i := 0 to 100 do
    blockNumList[i] := 0;
  if Check(res, 'List Blocks in AG') then
  begin
    dbNumbers := blockList.DBCount;
    SetLength(BlockItem, dbNumbers);
    res := plc.ListBlocksOfType(Block_DB, @blockNumList, iCount);
    if Check(res, 'DB List in AG') then
      if iCount > 0 then
        for i := 0 to iCount - 1 do
          if (blockNumList[i] { BlockItem[i].no } >= minDB) and
            ((blockNumList[i] { BlockItem[i].no } <= maxDB)) then
          begin
            BlockItem[k].no := blockNumList[i];
            BlockItem[k].MaxLen := GetDBInfofromPLC(BlockItem[i].no).MaxLen;
            Buffer := nullBuffer;
            res := plc.DBRead(BlockItem[k].no, 0, size, @Buffer);
            BlockItem[k].Content := Buffer;
            inc(k);
          end
          else
            continue
  end;
  result := k;
end;

function TSimatic.CompareDBLength(vDBno, vByte, vLen: word): boolean;
var
  i: integer;
begin
  result := true;
  for i := 0 to DBCount - 1 do
    if BlockItem[i].no = vDBno then
      if BlockItem[i].MaxLen < (vByte + vLen) then
      begin
        result := false;
        break
      end;
end;

function TSimatic.GetBlock(vDBno: integer): TBlockBuffer;
var
  i: integer;
begin
  for i := 0 to DBCount - 1 do
    if vDBno = BlockItem[i].no then
    begin
      result := BlockItem[i].Content;
      break;
    end
    else
end;

function TSimatic.ConnectPLC(reConnect: boolean = false): integer;
var
  plcStatus, res: integer;
  Buffer: TBlockBuffer;
  resultstr: string;
begin
  Connected := false;
  if not reConnect then
  begin
    plc := TS7Client.Create();
    S7 := TS7Helper.Create();
    res := plc.ConnectTo(plcIp, plcRack, plcSlot);
  end
  else
    res := plc.Connect;
  plcStatus := 128;
  res := plc.GetPlcStatus(plcStatus);
  if plc.Connected then
  begin
    Connected := true;
    size := SizeOf(Buffer);
    Buffer := nullBuffer;
    tagLength := 2;
    case plcStatus of
      0:
        resultstr := 'Unknow';
      4:
        resultstr := 'Stop';
      8:
        resultstr := 'Run';
    else
      resultstr := 'The CPU status is other error.';
    end;
    canBlock :=GetBlocks();
    result := plcStatus;
  end
  else
  begin
    resultstr := 'Disconnected';
    result := 12;
  end;
end;

function TSimatic.DisconnectPlc(): integer;
begin
  result := plc.Disconnect;

end;

function TSimatic.GetCPUInfo(): TS7CpuInfo;
var
  res: integer;
begin
  res := plc.GetCPUInfo(@result);
end;

function TSimatic.hexDump(mem: pointer; count: integer): string;
Var
  P: PS7Buffer;
  SHex, SChr: string;
  Ch: AnsiChar;
  c, cnt: integer;
begin
  P := PS7Buffer(mem);
  SHex := '';
  SChr := '';
  cnt := 0;
  for c := 0 to count - 1 do
  begin
    SHex := SHex + IntToHex(P^[c], 2) + ' ';
    Ch := AnsiChar(P^[c]);
    if not(Ch in ['a' .. 'z', 'A' .. 'Z', '0' .. '9', '_', '$', '-', #32]) then
      Ch := '.';
    SChr := SChr + String(Ch);
    inc(cnt);
    if cnt = 16 then
    begin
      result := (SHex + '  ' + SChr);
      SHex := '';
      SChr := '';
      cnt := 0;
    end;
  end;
  // Dump remainder
  if cnt > 0 then
  begin
    while Length(SHex) < 48 do
      SHex := SHex + ' ';
    result := (SHex + '  ' + SChr);
  end;
end;

function TSimatic.Check(iResult: integer; sFunction: string): boolean;
begin
  ok := 0;
  ko := 0;
  if (iResult = 0) then
    inc(ok)
  else
    inc(ko);
  result := iResult = 0;
end;

constructor TSimatic.Create;
var
  i: word;
begin
  inherited Create;
  // initialition empty block buffer and 4 bytes tag buffer
  size := SizeOf(nullBuffer);
  for i := 0 to size - 1 do
    nullBuffer[i] := 0;

  size := SizeOf(nullTagArray);
  for i := 0 to size - 1 do
    nullTagArray[i] := 0;
end;

destructor TSimatic.Destroy;
begin
  inherited Destroy;
end;

end.
